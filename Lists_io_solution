class Task:
    def __init__(self, task_name, priority):
        self.task_name = task_name
        self.priority = priority

def display_menu():
    """Displays the menu options to the user."""
    print("\nTo-Do List Menu:")
    print("1. Add Task")
    print("2. View Tasks")
    print("3. Mark Task as Completed")
    print("4. Exit")

def add_task(tasks):

    """Captures the task to be added"""
    while True:
        entry1 = input("Enter the task you want to add: ").strip()

        if not entry1:
            print("Task cannot be empty.")

        else:
            break


    """Sets a priority for the task to be added"""
    valid_priorities = ["Low", "Medium", "High"]

    while True:
        entry1_priority = input("Please input task priority (Low/Medium/High): ") 

        if not entry1_priority:
            entry1_priority = "Medium"

        if entry1_priority not in valid_priorities:
            print("Invalid priority. Please choose from Low/Medium/High.")

        else:
            break
    
    """Creates the task"""
    task = Task(entry1, entry1_priority)
    tasks.append(task)

def view_tasks(tasks):
    """Displays all tasks in the to-do list."""

    if tasks:
        print("\nYour To-Do List:")
        print("Task, Priority")
        for i, task in enumerate(tasks, start=1):
            print(f"{i}. {task.task_name}, {task.priority}")
    else:
        print("\nYour to-do list is empty!")

def sort_tasks(tasks):

    high_prio = [task for task in tasks if task.priority == "High" ]
    med_prio = [task for task in tasks if task.priority == "Medium" ]
    low_prio = [task for task in tasks if task.priority == "Low" ]

    print('\nPriority - High:')
    for i, task in enumerate(high_prio, start = 1):
        print(f' {i}. {task.task_name}')
    
    print('\nPriority - Medium:')
    for i, task in enumerate(med_prio, start = 1):
        print(f' {i}. {task.task_name}')
    
    print('\nPriority - Low:')
    for i, task in enumerate(low_prio, start = 1):
        print(f' {i}. {task.task_name}')

def mark_task_completed(tasks):
    """Marks a task as completed and removes it from the list."""
    if not tasks:
        print("Your to-do list is empty!")
        return

    try:
        view_tasks(tasks)
        task_number = int(input("Enter the task number to mark as completed: "))
        if 1 <= task_number <= len(tasks):
            completed_task = tasks.pop(task_number - 1)
            print(f"Task '{completed_task}' marked as completed!")
        else:
            print("Invalid task number. Please try again.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")

def main():
    """Main function to run the to-do list program."""
    import json

    try:
        with open('tasks.json', 'r') as file:
                tasks_load = json.load(file)
                #print(tasks_load) used for debugging

                tasks = []

                for task in tasks_load:
                    tasks.append(Task(task['Task name'], task['Priority']))
                #print(tasks) used for debugging

    except:
       tasks = []
       print('No existing file. Please create a new list.')       

    while True:
        display_menu()
        choice = input("Enter your choice (1-4): ").strip()

        if choice == "1":
            add_task(tasks)
        elif choice == "2":
            sort_tasks(tasks)
        elif choice == "3":
            mark_task_completed(tasks)
        elif choice == "4":
            task_list = []
            for task in tasks:
                task_list.append({"Task name": task.task_name, "Priority": task.priority})
            
            with open('tasks.json', 'w') as file:
                json.dump(task_list, file, indent = 4)
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice. Please select a valid option.")

# Run the program
if __name__ == "__main__":
    main()

#Nice Nice! Runs smoothly.