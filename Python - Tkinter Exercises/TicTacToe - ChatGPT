import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic Tac Toe")

        self.current_player = "X"
        self.board = ["" for _ in range(9)]

        self.buttons = []
        self.create_widgets()

    def create_widgets(self):
        # Display indicator
        self.label = tk.Label(self.root, text=f"Player {self.current_player}'s Turn", font=("Arial", 14))
        self.label.pack(pady=10)

        # Game grid
        grid_frame = tk.Frame(self.root)
        grid_frame.pack()

        for i in range(9):
            button = tk.Button(grid_frame, text="", font=("Arial", 20), height=2, width=5, command=lambda i=i: self.make_move(i))
            button.grid(row=i // 3, column=i % 3)
            self.buttons.append(button)

        # Restart button
        self.restart_button = tk.Button(self.root, text="Restart", font=("Arial", 12), command=self.restart_game)
        self.restart_button.pack(pady=10)

    def make_move(self, index):
        if self.board[index] == "" and not self.check_winner():
            self.board[index] = self.current_player
            self.buttons[index].config(text=self.current_player)

            winner = self.check_winner()
            if winner:
                self.display_winner(winner)
            elif "" not in self.board:
                self.display_tie()
            else:
                self.switch_player()

    def switch_player(self):
        self.current_player = "O" if self.current_player == "X" else "X"
        self.label.config(text=f"Player {self.current_player}'s Turn")

    def check_winner(self):
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            [0, 4, 8], [2, 4, 6]              # Diagonals
        ]

        for combination in winning_combinations:
            if (
                self.board[combination[0]] == self.board[combination[1]] == self.board[combination[2]] != ""
            ):
                return combination

        return None

    def display_winner(self, combination):
        for index in combination:
            self.buttons[index].config(bg="green")
        self.label.config(text=f"Player {self.current_player} Wins!")
        messagebox.showinfo("Game Over", f"Player {self.current_player} Wins!")

    def display_tie(self):
        for button in self.buttons:
            button.config(bg="yellow")
        self.label.config(text="It's a Tie!")
        messagebox.showinfo("Game Over", "It's a Tie!")

    def restart_game(self):
        self.current_player = "X"
        self.board = ["" for _ in range(9)]
        self.label.config(text=f"Player {self.current_player}'s Turn")

        for button in self.buttons:
            button.config(text="", bg="SystemButtonFace")

# Main loop
if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
